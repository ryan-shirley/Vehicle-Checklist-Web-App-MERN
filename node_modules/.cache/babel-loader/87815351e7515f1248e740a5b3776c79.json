{"ast":null,"code":"var _jsxFileName = \"/Users/ryanshirley/Documents/Local Development/hgv-app/src/components/CryptoInfo.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\n\nclass CryptoInfo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sendToCrypto = () => {\n      this.props.history.push(\"/coin/\" + this.state.slug, this.props.coin);\n    };\n\n    let currency = this.props.currency;\n\n    if (currency === 'EUR') {\n      currency = '€';\n    } else if (currency === 'USD') {\n      currency = '$';\n    } else if (currency === 'GPB') {\n      currency = '£';\n    }\n\n    this.state = {\n      name: this.props.coin.name,\n      currency: currency,\n      price: this.props.coin.quote[this.props.currency].price.toFixed(4),\n      volume24hr: this.props.coin.quote[this.props.currency].volume_24h,\n      change24h: this.props.coin.quote[this.props.currency].percent_change_24h.toFixed(2),\n      change7day: this.props.coin.quote[this.props.currency].percent_change_7d.toFixed(2),\n      slug: this.props.coin.slug\n    };\n    this.sendToCrypto = this.sendToCrypto.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props !== nextProps) {\n      this.setState({\n        currency: nextProps.currency,\n        price: nextProps.coin.quote[nextProps.currency].price.toFixed(4),\n        volume24hr: nextProps.coin.quote[nextProps.currency].volume_24h\n      });\n    }\n  }\n\n  formatNumber(num) {\n    return parseFloat(num).toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n  }\n\n  render() {\n    return React.createElement(\"tr\", {\n      onClick: this.sendToCrypto,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      scope: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"#\",\n      alt: \"\",\n      className: \"rounded-circle float-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), \" \", this.state.name), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"currency\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, this.state.currency), this.state.price), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"badge badge-pill \" + (this.state.change24h > 0 ? 'badge-success' : 'badge-danger'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, this.state.change24h)), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"badge badge-pill \" + (this.state.change7day > 0 ? 'badge-success' : 'badge-danger'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, this.state.change7day)), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"currency\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, this.state.currency), this.formatNumber(this.state.volume24hr)));\n  }\n\n}\n\nCryptoInfo.propTypes = {\n  coin: PropTypes.object.isRequired,\n  currency: PropTypes.string.isRequired\n};\nexport default withRouter(CryptoInfo);","map":{"version":3,"sources":["/Users/ryanshirley/Documents/Local Development/hgv-app/src/components/CryptoInfo.js"],"names":["React","PropTypes","withRouter","CryptoInfo","Component","constructor","props","sendToCrypto","history","push","state","slug","coin","currency","name","price","quote","toFixed","volume24hr","volume_24h","change24h","percent_change_24h","change7day","percent_change_7d","bind","componentWillReceiveProps","nextProps","setState","formatNumber","num","parseFloat","replace","render","propTypes","object","isRequired","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\n\nclass CryptoInfo extends React.Component {\n    constructor(props) {\n        super(props)\n\n        let currency = this.props.currency\n        if(currency === 'EUR') {\n            currency = '€'\n        }\n        else if (currency === 'USD') {\n            currency = '$'\n        }\n        else if (currency === 'GPB') {\n            currency = '£'\n        }\n\n        this.state = {\n            name: this.props.coin.name,\n            currency: currency,\n            price: this.props.coin.quote[this.props.currency].price.toFixed(4),\n            volume24hr: this.props.coin.quote[this.props.currency].volume_24h,\n            change24h: this.props.coin.quote[this.props.currency].percent_change_24h.toFixed(2),\n            change7day: this.props.coin.quote[this.props.currency].percent_change_7d.toFixed(2),\n            slug: this.props.coin.slug\n        }\n\n        this.sendToCrypto = this.sendToCrypto.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(this.props !== nextProps) {\n            this.setState({\n                currency: nextProps.currency,\n                price: nextProps.coin.quote[nextProps.currency].price.toFixed(4),\n                volume24hr: nextProps.coin.quote[nextProps.currency].volume_24h,\n            });\n        }\n    }\n\n    sendToCrypto = () => {\n        this.props.history.push(\"/coin/\" + this.state.slug, this.props.coin);\n    }\n\n    formatNumber(num) {\n        return parseFloat(num).toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n    }\n\n    render() {\n        return (\n            <tr onClick={this.sendToCrypto}>\n                <th scope=\"row\"><img src=\"#\" alt=\"\" className=\"rounded-circle float-left\" /> {this.state.name}</th>\n                <td><span className=\"currency\">{this.state.currency}</span>{this.state.price}</td>\n                <td><span className={\"badge badge-pill \" + (this.state.change24h > 0 ? 'badge-success' : 'badge-danger')}>{this.state.change24h}</span></td>\n                <td><span className={\"badge badge-pill \" + (this.state.change7day > 0 ? 'badge-success' : 'badge-danger')}>{this.state.change7day}</span></td>\n                <td><span className=\"currency\">{this.state.currency}</span>{this.formatNumber(this.state.volume24hr)}</td>\n            </tr>\n        )\n    }\n}\n\nCryptoInfo.propTypes = {\n    coin: PropTypes.object.isRequired,\n    currency: PropTypes.string.isRequired\n}      \n\nexport default withRouter(CryptoInfo)"]},"metadata":{},"sourceType":"module"}