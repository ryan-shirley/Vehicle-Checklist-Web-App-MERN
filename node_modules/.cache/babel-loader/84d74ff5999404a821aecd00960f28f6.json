{"ast":null,"code":"var _jsxFileName = \"/Users/ryanshirley/Documents/Local Development/hgv-app/src/components/CryptoList.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport CryptoInfo from '../components/CryptoInfo';\nimport CryptoCard from '../components/CryptoCard'; // Theme Context\n\nimport { ThemeContext } from \"../ThemeContext\";\n\nclass CryptoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      coins: [],\n      currency: 'EUR',\n      display: this.props.display,\n      amount: this.props.amount\n    }; // Binding this to work in the callback\n\n    this.currencyChange = this.currencyChange.bind(this);\n    this.fetchLatest = this.fetchLatest.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state.display === 'table') {\n      this.fetchLatest().then(data => {\n        this.setState({\n          coins: data.coins\n        });\n      });\n    } else if (this.state.display === 'card') {\n      this.fetchLatest().then(data => {\n        this.fetchMetaData(data.coins).then(coins => {\n          this.setState({\n            coins: coins\n          });\n        });\n      });\n    }\n  }\n\n  currencyChange(event) {\n    const newCurrency = event.target.value;\n\n    if (this.state.display === 'table') {\n      this.fetchLatest(newCurrency).then(data => {\n        this.setState({\n          coins: data.coins,\n          currency: data.currency\n        });\n      });\n    } else if (this.state.display === 'card') {\n      this.fetchLatest(newCurrency).then(data => {\n        this.fetchMetaData(data.coins).then(coins => {\n          this.setState({\n            coins: coins,\n            currency: data.currency\n          });\n        });\n      });\n    }\n  }\n\n  fetchLatest(newCurrency) {\n    const state = this.state;\n    return new Promise(function (resolve, reject) {\n      const currency = newCurrency || state.currency; // Blocked by CORS - Uses Moesif CORS chrome extension to bypass.\n\n      fetch(process.env.REACT_APP_COIN_MARKET_MAP_API_URI + 'cryptocurrency/listings/latest?start=1&limit=' + state.amount + '&convert=' + currency, {\n        method: 'GET',\n        headers: new Headers({\n          'X-CMC_PRO_API_KEY': process.env.REACT_APP_COIN_MARKET_MAP_API_KEY\n        })\n      }).then(res => res.json()) // Parse output to json\n      .then(data => {\n        resolve({\n          coins: data.data,\n          currency: currency\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  fetchMetaData(data) {\n    return new Promise(function (resolve, reject) {\n      let topCoins = data; // Get Top 4 coins Metadata\n\n      fetch(process.env.REACT_APP_COIN_MARKET_MAP_API_URI + `cryptocurrency/info?id=${topCoins[0].id},${topCoins[1].id},${topCoins[2].id},${topCoins[3].id}`, {\n        method: 'GET',\n        headers: new Headers({\n          'X-CMC_PRO_API_KEY': process.env.REACT_APP_COIN_MARKET_MAP_API_KEY\n        })\n      }).then(resp => resp.json()) // Parse output to json\n      .then(metadata => {\n        metadata = metadata.data; // Add metadata to price\n\n        const top4coins = topCoins.map(coin => {\n          coin.metadata = metadata[coin.id];\n          return coin;\n        });\n        resolve(top4coins);\n      }).catch(err => {\n        reject('API call error: ', err.message);\n      });\n    });\n  }\n\n  render() {\n    const currencyChanger = React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"currency\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Currency\"), React.createElement(\"select\", {\n      className: \"form-control ml-2\",\n      id: \"currency\",\n      onChange: this.currencyChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"EUR\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"EUR\"), React.createElement(\"option\", {\n      value: \"USD\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"USD\"), React.createElement(\"option\", {\n      value: \"GBP\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"GBP\"))));\n\n    if (this.state.display === 'table') {\n      const themeStyle = this.context.style;\n      return React.createElement(React.Fragment, null, currencyChanger, React.createElement(\"table\", {\n        className: \"table table-\" + themeStyle + \" table-hover table-striped\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        className: \"bg-warning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        scope: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"Name\"), React.createElement(\"th\", {\n        scope: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"Price\"), React.createElement(\"th\", {\n        scope: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"24h Change\"), React.createElement(\"th\", {\n        scope: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"7day Change\"), React.createElement(\"th\", {\n        scope: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"24h Volume\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, this.state.coins.map(coin => React.createElement(CryptoInfo, {\n        key: coin.slug,\n        coin: coin,\n        currency: this.state.currency,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      })))));\n    } else if (this.state.display === 'card') {\n      return React.createElement(React.Fragment, null, currencyChanger, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, this.state.coins.map(coin => React.createElement(\"div\", {\n        className: \"col-md-6\",\n        key: coin.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(CryptoCard, {\n        coin: coin,\n        currency: this.state.currency,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      })))));\n    }\n  }\n\n}\n\nCryptoList.contextType = ThemeContext;\nCryptoList.propTypes = {\n  display: PropTypes.string.isRequired,\n  amount: PropTypes.number.isRequired\n};\nexport default CryptoList;","map":{"version":3,"sources":["/Users/ryanshirley/Documents/Local Development/hgv-app/src/components/CryptoList.js"],"names":["React","PropTypes","CryptoInfo","CryptoCard","ThemeContext","CryptoList","Component","constructor","props","state","coins","currency","display","amount","currencyChange","bind","fetchLatest","componentDidMount","then","data","setState","fetchMetaData","event","newCurrency","target","value","Promise","resolve","reject","fetch","process","env","REACT_APP_COIN_MARKET_MAP_API_URI","method","headers","Headers","REACT_APP_COIN_MARKET_MAP_API_KEY","res","json","catch","err","topCoins","id","resp","metadata","top4coins","map","coin","message","render","currencyChanger","themeStyle","context","style","slug","contextType","propTypes","string","isRequired","number"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport CryptoInfo from '../components/CryptoInfo'\nimport CryptoCard from '../components/CryptoCard'\n\n// Theme Context\nimport { ThemeContext } from \"../ThemeContext\";\n\nclass CryptoList extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            coins: [],\n            currency: 'EUR',\n            display: this.props.display,\n            amount: this.props.amount\n        }\n\n        // Binding this to work in the callback\n        this.currencyChange = this.currencyChange.bind(this)\n        this.fetchLatest = this.fetchLatest.bind(this)\n    }\n\n    componentDidMount() {\n        if(this.state.display === 'table') {\n            this.fetchLatest()\n            .then((data) => {\n                this.setState({ \n                    coins: data.coins\n                })\n            })\n        }\n        else if (this.state.display === 'card') {\n            this.fetchLatest()\n            .then((data) => {\n                this.fetchMetaData(data.coins)\n                .then((coins) => {\n                    this.setState({ \n                        coins: coins\n                    })\n                })\n            })\n        }\n    }\n\n    currencyChange(event) {\n        const newCurrency = event.target.value\n\n        if(this.state.display === 'table') {\n            this.fetchLatest(newCurrency)\n                .then((data) => {\n                    this.setState({ \n                        coins: data.coins,\n                        currency: data.currency\n                    })\n                })\n        }\n        else if (this.state.display === 'card') {\n            this.fetchLatest(newCurrency)\n            .then((data) => {\n                this.fetchMetaData(data.coins)\n                .then((coins) => {\n                    this.setState({ \n                        coins: coins,\n                        currency: data.currency\n                    })\n                })\n            })\n        }\n    }\n\n    fetchLatest(newCurrency) {\n        const state = this.state\n\n        return new Promise(function(resolve, reject) {\n\n            const currency = newCurrency || state.currency\n\n            // Blocked by CORS - Uses Moesif CORS chrome extension to bypass.\n            fetch(process.env.REACT_APP_COIN_MARKET_MAP_API_URI + 'cryptocurrency/listings/latest?start=1&limit='+ state.amount +'&convert=' + currency, { \n                method: 'GET', \n                headers: new Headers({\n                'X-CMC_PRO_API_KEY': process.env.REACT_APP_COIN_MARKET_MAP_API_KEY\n                })\n            })\n            .then(res => res.json()) // Parse output to json\n            .then((data) => {\n                resolve({\n                    coins: data.data,\n                    currency: currency\n                })\n            })\n            .catch((err) => {\n                reject(err)\n            })\n        })\n    }\n\n    fetchMetaData(data) {\n        return new Promise(function(resolve, reject) {\n            let topCoins = data\n\n            // Get Top 4 coins Metadata\n            fetch(process.env.REACT_APP_COIN_MARKET_MAP_API_URI + `cryptocurrency/info?id=${topCoins[0].id},${topCoins[1].id},${topCoins[2].id},${topCoins[3].id}`, { \n                method: 'GET', \n                headers: new Headers({\n                'X-CMC_PRO_API_KEY': process.env.REACT_APP_COIN_MARKET_MAP_API_KEY\n                })\n            })\n            .then(resp => resp.json()) // Parse output to json\n            .then((metadata) => {\n                metadata = metadata.data\n                // Add metadata to price\n                const top4coins = topCoins.map((coin) => {\n                    coin.metadata = metadata[coin.id]\n                    return coin;\n                })\n\n                resolve(top4coins)\n            })\n            .catch((err) => {\n                reject('API call error: ', err.message)\n            });\n        })\n    }\n\n    static contextType = ThemeContext;\n\n    render() {\n        const currencyChanger = (\n            <form>\n                <div className=\"form-group\">\n                    <label htmlFor=\"currency\">Currency</label>\n                    <select className=\"form-control ml-2\" id=\"currency\" onChange={this.currencyChange}>\n                        <option value=\"EUR\">EUR</option>\n                        <option value=\"USD\">USD</option>\n                        <option value=\"GBP\">GBP</option>\n                    </select>\n                </div>\n            </form>\n        )\n        if(this.state.display === 'table') {\n            const themeStyle = this.context.style;\n\n            return (\n                <>\n                    {currencyChanger}\n                    \n                    <table className={\"table table-\"+ themeStyle + \" table-hover table-striped\"}>\n                        <thead className=\"bg-warning\">\n                            <tr>\n                                <th scope=\"col\">Name</th>\n                                <th scope=\"col\">Price</th>\n                                <th scope=\"col\">24h Change</th>\n                                <th scope=\"col\">7day Change</th>\n                                <th scope=\"col\">24h Volume</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n\n                        {this.state.coins.map((coin) => (\n                            <CryptoInfo\n                            key={coin.slug}\n                            coin={coin}\n                            currency={this.state.currency} />\n                        ))}\n                        </tbody>\n                    </table>\n                </>\n            )\n        }\n        else if(this.state.display === 'card') {\n            return (\n                <>\n                    {currencyChanger}\n                    \n                    <div className=\"row\">\n                        {this.state.coins.map((coin) => (\n                            <div className=\"col-md-6\" key={coin.id}>\n                                <CryptoCard \n                                    coin={coin}\n                                    currency={this.state.currency} />\n                            </div>\n                        ))}\n                    </div>\n                </>\n            )\n        }\n    }\n}\n\nCryptoList.propTypes = {\n    display: PropTypes.string.isRequired,\n    amount: PropTypes.number.isRequired\n}     \n\n\nexport default CryptoList"]},"metadata":{},"sourceType":"module"}